# Location: .github/workflows/release.yml
# SmartCampus Release Automation Workflow
# Handles versioning, releases, and deployment to production

name: Release Automation

on:
  push:
    tags:
      - "v*.*.*"
  workflow_dispatch:
    inputs:
      release_type:
        description: "Type of release"
        required: true
        default: "patch"
        type: choice
        options:
          - major
          - minor
          - patch
          - prerelease
      prerelease:
        description: "Mark as prerelease"
        required: false
        default: false
        type: boolean
      deploy_to_staging:
        description: "Deploy to staging after release"
        required: false
        default: true
        type: boolean
      deploy_to_production:
        description: "Deploy to production after release"
        required: false
        default: false
        type: boolean

env:
  JAVA_VERSION: "17"
  MAVEN_OPTS: -Xmx2g
  REGISTRY: ghcr.io
  IMAGE_NAME: smartcampus

permissions:
  contents: write
  packages: write
  deployments: write
  pull-requests: write

jobs:
  # Job 1: Pre-release Validation
  pre-release-validation:
    name: Pre-release Validation
    runs-on: ubuntu-latest
    outputs:
      release-version: ${{ steps.version.outputs.release-version }}
      is-prerelease: ${{ steps.version.outputs.is-prerelease }}
      current-version: ${{ steps.version.outputs.current-version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: "temurin"
          cache: maven

      - name: Determine release version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            # Tag-based release
            RELEASE_VERSION=${GITHUB_REF#refs/tags/v}
            IS_PRERELEASE=$(echo $RELEASE_VERSION | grep -E '-(alpha|beta|rc)' && echo true || echo false)
          else
            # Manual release
            CURRENT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout | sed 's/-SNAPSHOT//')
            
            case "${{ github.event.inputs.release_type }}" in
              major)
                RELEASE_VERSION=$(echo $CURRENT_VERSION | awk -F. '{print ($1+1)".0.0"}')
                ;;
              minor)
                RELEASE_VERSION=$(echo $CURRENT_VERSION | awk -F. '{print $1"."($2+1)".0"}')
                ;;
              patch)
                RELEASE_VERSION=$(echo $CURRENT_VERSION | awk -F. '{print $1"."$2"."($3+1)}')
                ;;
              prerelease)
                RELEASE_VERSION="${CURRENT_VERSION}-rc.$(date +%Y%m%d%H%M%S)"
                ;;
            esac
            
            IS_PRERELEASE="${{ github.event.inputs.prerelease }}"
          fi

          echo "release-version=$RELEASE_VERSION" >> $GITHUB_OUTPUT
          echo "is-prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
          echo "current-version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)" >> $GITHUB_OUTPUT

          echo "Release Version: $RELEASE_VERSION"
          echo "Is Prerelease: $IS_PRERELEASE"

      - name: Validate release branch
        run: |
          CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)

          if [ "${{ steps.version.outputs.is-prerelease }}" = "false" ]; then
            # Production release must be from main branch
            if [ "$CURRENT_BRANCH" != "main" ] && [ "${{ github.event_name }}" != "push" ]; then
              echo "❌ Production releases must be from main branch"
              exit 1
            fi
          fi

          echo "✅ Release branch validation passed"

      - name: Run comprehensive tests
        run: |
          # Run all tests before release
          mvn clean test verify \
            -Dtest="**/*Test.java,**/*IntegrationTest.java" \
            -Dmaven.test.failure.ignore=false

      - name: Validate dependencies
        run: |
          # Check for SNAPSHOT dependencies in release
          if [ "${{ steps.version.outputs.is-prerelease }}" = "false" ]; then
            if mvn dependency:list | grep -i snapshot; then
              echo "❌ Production release cannot contain SNAPSHOT dependencies"
              exit 1
            fi
          fi

          # Security scan
          mvn org.owasp:dependency-check-maven:check -DfailBuildOnCVSS=8

          echo "✅ Dependency validation passed"

      - name: Validate changelog
        run: |
          if [ ! -f "CHANGELOG.md" ]; then
            echo "❌ CHANGELOG.md file is required"
            exit 1
          fi

          # Check if changelog has entry for this version
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            if ! grep -q "${{ steps.version.outputs.release-version }}" CHANGELOG.md; then
              echo "❌ CHANGELOG.md must contain entry for version ${{ steps.version.outputs.release-version }}"
              exit 1
            fi
          fi

          echo "✅ Changelog validation passed"

  # Job 2: Build Release Artifacts
  build-release:
    name: Build Release Artifacts
    runs-on: ubuntu-latest
    needs: pre-release-validation
    outputs:
      artifact-name: ${{ steps.build.outputs.artifact-name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: "temurin"
          cache: maven

      - name: Configure Git
        run: |
          git config --global user.name "Release Bot"
          git config --global user.email "release-bot@smartcampus.edu"

      - name: Update version for release
        id: build
        run: |
          RELEASE_VERSION="${{ needs.pre-release-validation.outputs.release-version }}"

          # Update Maven version
          mvn versions:set -DnewVersion=$RELEASE_VERSION -DgenerateBackupPoms=false

          # Commit version change if manual release
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            git add pom.xml
            git commit -m "chore: bump version to $RELEASE_VERSION"
          fi

          echo "artifact-name=smartcampus-$RELEASE_VERSION" >> $GITHUB_OUTPUT

      - name: Build release artifacts
        run: |
          mvn clean package -DskipTests \
            -Dbuild.version="${{ needs.pre-release-validation.outputs.release-version }}" \
            -Dbuild.time="$(date -u +"%Y-%m-%dT%H:%M:%SZ")" \
            -Dgit.commit="$(git rev-parse HEAD)" \
            -Dgit.branch="$(git rev-parse --abbrev-ref HEAD)" \
            -Prelease

      - name: Generate checksums
        run: |
          cd target
          for file in *.jar; do
            if [ -f "$file" ]; then
              sha256sum "$file" > "$file.sha256"
              md5sum "$file" > "$file.md5"
            fi
          done

      - name: Create distribution packages
        run: |
          # Create distribution directory
          mkdir -p dist/smartcampus-${{ needs.pre-release-validation.outputs.release-version }}

          # Copy artifacts
          cp target/smartcampus-*.jar dist/smartcampus-${{ needs.pre-release-validation.outputs.release-version }}/
          cp target/*.sha256 dist/smartcampus-${{ needs.pre-release-validation.outputs.release-version }}/
          cp target/*.md5 dist/smartcampus-${{ needs.pre-release-validation.outputs.release-version }}/

          # Copy documentation
          cp README.md dist/smartcampus-${{ needs.pre-release-validation.outputs.release-version }}/
          cp CHANGELOG.md dist/smartcampus-${{ needs.pre-release-validation.outputs.release-version }}/
          cp LICENSE dist/smartcampus-${{ needs.pre-release-validation.outputs.release-version }}/

          # Copy configuration templates
          mkdir -p dist/smartcampus-${{ needs.pre-release-validation.outputs.release-version }}/config
          cp -r src/main/resources/config/* dist/smartcampus-${{ needs.pre-release-validation.outputs.release-version }}/config/ || true

          # Copy scripts
          mkdir -p dist/smartcampus-${{ needs.pre-release-validation.outputs.release-version }}/scripts
          cp -r scripts/* dist/smartcampus-${{ needs.pre-release-validation.outputs.release-version }}/scripts/ || true

          # Create archives
          cd dist
          tar -czf smartcampus-${{ needs.pre-release-validation.outputs.release-version }}.tar.gz smartcampus-${{ needs.pre-release-validation.outputs.release-version }}/
          zip -r smartcampus-${{ needs.pre-release-validation.outputs.release-version }}.zip smartcampus-${{ needs.pre-release-validation.outputs.release-version }}/

      - name: Generate release notes
        run: |
          # Extract changelog for this version
          VERSION="${{ needs.pre-release-validation.outputs.release-version }}"

          cat > release-notes.md << EOF
          # SmartCampus v$VERSION

          $(date +"%B %d, %Y")

          ## What's Changed

          EOF

          # Extract changelog section for this version
          if grep -q "## \[$VERSION\]" CHANGELOG.md; then
            sed -n "/## \[$VERSION\]/,/## \[/p" CHANGELOG.md | sed '1d;$d' >> release-notes.md
          else
            echo "- Bug fixes and improvements" >> release-notes.md
          fi

          cat >> release-notes.md << EOF

          ## Downloads

          - **JAR File**: \`smartcampus-$VERSION.jar\`
          - **Full Distribution**: \`smartcampus-$VERSION.tar.gz\` or \`smartcampus-$VERSION.zip\`
          - **Docker Image**: \`ghcr.io/${{ github.repository_owner }}/smartcampus:$VERSION\`

          ## Installation

          ### Using JAR
          \`\`\`bash
          java -jar smartcampus-$VERSION.jar
          \`\`\`

          ### Using Docker
          \`\`\`bash
          docker run -p 8080:8080 ghcr.io/${{ github.repository_owner }}/smartcampus:$VERSION
          \`\`\`

          ## Verification

          - SHA256 checksums are provided for all artifacts
          - Docker images are signed and can be verified

          ## Documentation

          - [User Guide](https://github.com/${{ github.repository }}/blob/v$VERSION/docs/guides/getting-started.md)
          - [API Documentation](https://github.com/${{ github.repository }}/blob/v$VERSION/docs/api/)
          - [Deployment Guide](https://github.com/${{ github.repository }}/blob/v$VERSION/docs/guides/deployment.md)

          EOF

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts-${{ needs.pre-release-validation.outputs.release-version }}
          path: |
            dist/
            release-notes.md
            target/site/

  # Job 3: Build and Push Docker Images
  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [pre-release-validation, build-release]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download release artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts-${{ needs.pre-release-validation.outputs.release-version }}
          path: ./

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}},value=v${{ needs.pre-release-validation.outputs.release-version }}
            type=semver,pattern={{major}}.{{minor}},value=v${{ needs.pre-release-validation.outputs.release-version }}
            type=semver,pattern={{major}},value=v${{ needs.pre-release-validation.outputs.release-version }}
            type=raw,value=latest,enable=${{ needs.pre-release-validation.outputs.is-prerelease == 'false' }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ needs.pre-release-validation.outputs.release-version }}
            BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
            VCS_REF=${{ github.sha }}

      - name: Sign Docker image
        run: |
          # Install cosign
          curl -sL https://github.com/sigstore/cosign/releases/latest/download/cosign-linux-amd64 -o cosign
          chmod +x cosign
          sudo mv cosign /usr/local/bin/

          # Sign the image
          echo "${{ secrets.COSIGN_PRIVATE_KEY }}" > cosign.key
          cosign sign --key cosign.key ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ needs.pre-release-validation.outputs.release-version }}
          rm cosign.key
        env:
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
        if: env.COSIGN_PRIVATE_KEY != null

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          image: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ needs.pre-release-validation.outputs.release-version }}
          format: spdx-json
          output-file: sbom.spdx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom-${{ needs.pre-release-validation.outputs.release-version }}
          path: sbom.spdx.json

  # Job 4: Security Scanning
  security-scan:
    name: Security Scan Release
    runs-on: ubuntu-latest
    needs: [pre-release-validation, build-docker]

    steps:
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ needs.pre-release-validation.outputs.release-version }}
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

      - name: Check for critical vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}:${{ needs.pre-release-validation.outputs.release-version }}
          format: "table"
          exit-code: "1"
          severity: "CRITICAL,HIGH"

  # Job 5: Create GitHub Release
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [pre-release-validation, build-release, build-docker, security-scan]
    outputs:
      release-id: ${{ steps.create-release.outputs.id }}
      release-url: ${{ steps.create-release.outputs.html_url }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download release artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts-${{ needs.pre-release-validation.outputs.release-version }}
          path: ./

      - name: Download SBOM
        uses: actions/download-artifact@v4
        with:
          name: sbom-${{ needs.pre-release-validation.outputs.release-version }}
          path: ./

      - name: Create GitHub Release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.pre-release-validation.outputs.release-version }}
          release_name: SmartCampus v${{ needs.pre-release-validation.outputs.release-version }}
          body_path: release-notes.md
          draft: false
          prerelease: ${{ needs.pre-release-validation.outputs.is-prerelease }}

      - name: Upload JAR to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create-release.outputs.upload_url }}
          asset_path: dist/smartcampus-${{ needs.pre-release-validation.outputs.release-version }}/smartcampus-${{ needs.pre-release-validation.outputs.release-version }}.jar
          asset_name: smartcampus-${{ needs.pre-release-validation.outputs.release-version }}.jar
          asset_content_type: application/java-archive

      - name: Upload distribution archives
        run: |
          # Upload tar.gz
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/gzip" \
            --data-binary @dist/smartcampus-${{ needs.pre-release-validation.outputs.release-version }}.tar.gz \
            "${{ steps.create-release.outputs.upload_url }}?name=smartcampus-${{ needs.pre-release-validation.outputs.release-version }}.tar.gz&label=Distribution%20(tar.gz)"

          # Upload zip
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/zip" \
            --data-binary @dist/smartcampus-${{ needs.pre-release-validation.outputs.release-version }}.zip \
            "${{ steps.create-release.outputs.upload_url }}?name=smartcampus-${{ needs.pre-release-validation.outputs.release-version }}.zip&label=Distribution%20(zip)"

          # Upload SBOM
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            --data-binary @sbom.spdx.json \
            "${{ steps.create-release.outputs.upload_url }}?name=sbom.spdx.json&label=Software%20Bill%20of%20Materials"

      - name: Update version for next development cycle
        if: github.event_name == 'workflow_dispatch' && needs.pre-release-validation.outputs.is-prerelease == 'false'
        run: |
          # Increment version for next development cycle
          CURRENT_VERSION="${{ needs.pre-release-validation.outputs.release-version }}"
          NEXT_VERSION=$(echo $CURRENT_VERSION | awk -F. '{print $1"."$2"."($3+1)"-SNAPSHOT"}')

          # Update Maven version
          mvn versions:set -DnewVersion=$NEXT_VERSION -DgenerateBackupPoms=false

          # Commit and push
          git config --global user.name "Release Bot"
          git config --global user.email "release-bot@smartcampus.edu"
          git add pom.xml
          git commit -m "chore: prepare for next development iteration - $NEXT_VERSION"
          git push origin main

  # Job 6: Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [pre-release-validation, create-release]
    if: github.event.inputs.deploy_to_staging == 'true' || (github.event_name == 'push' && needs.pre-release-validation.outputs.is-prerelease == 'false')
    environment:
      name: staging
      url: https://staging.smartcampus.edu

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to staging environment
        run: |
          echo "Deploying SmartCampus v${{ needs.pre-release-validation.outputs.release-version }} to staging..."

          # Here you would typically:
          # 1. Connect to staging environment
          # 2. Pull the new Docker image
          # 3. Update the deployment
          # 4. Run health checks

          # Example using Docker Compose on staging server
          # ssh staging-server "cd /opt/smartcampus && docker-compose pull && docker-compose up -d"

          echo "✅ Successfully deployed to staging"

      - name: Run staging smoke tests
        run: |
          # Wait for deployment to stabilize
          sleep 30

          # Run smoke tests against staging
          # curl -f https://staging.smartcampus.edu/actuator/health
          # Add more comprehensive smoke tests here

          echo "✅ Staging smoke tests passed"

      - name: Notify staging deployment
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: "#releases"
          message: |
            🚀 SmartCampus v${{ needs.pre-release-validation.outputs.release-version }} deployed to staging!

            Environment: https://staging.smartcampus.edu
            Release Notes: ${{ needs.create-release.outputs.release-url }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Job 7: Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [pre-release-validation, create-release, deploy-staging]
    if: |
      (github.event.inputs.deploy_to_production == 'true' || 
       (github.event_name == 'push' && needs.pre-release-validation.outputs.is-prerelease == 'false')) &&
      needs.deploy-staging.result == 'success'
    environment:
      name: production
      url: https://smartcampus.edu

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Production deployment approval
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ secrets.GITHUB_TOKEN }}
          approvers: ${{ github.repository_owner }}
          minimum-approvals: 1
          issue-title: "Deploy SmartCampus v${{ needs.pre-release-validation.outputs.release-version }} to Production"
          issue-body: |
            Please review and approve the production deployment of SmartCampus v${{ needs.pre-release-validation.outputs.release-version }}.

            **Release Information:**
            - Version: v${{ needs.pre-release-validation.outputs.release-version }}
            - Staging Tests: ✅ Passed
            - Security Scan: ✅ Passed
            - Release Notes: ${{ needs.create-release.outputs.release-url }}

            **Deployment Details:**
            - Docker Image: `ghcr.io/${{ github.repository_owner }}/smartcampus:${{ needs.pre-release-validation.outputs.release-version }}`
            - Environment: Production
            - Estimated Downtime: < 5 minutes

            Please ensure:
            - [ ] All tests are passing
            - [ ] Database migrations are ready (if any)
            - [ ] Rollback plan is prepared
            - [ ] Team is notified of deployment window

      - name: Create production backup
        run: |
          echo "Creating production backup before deployment..."
          # Add backup commands here
          # kubectl create backup production-backup-$(date +%Y%m%d-%H%M%S)
          echo "✅ Production backup created"

      - name: Deploy to production
        run: |
          echo "Deploying SmartCampus v${{ needs.pre-release-validation.outputs.release-version }} to production..."

          # Example production deployment steps:
          # 1. Blue-green deployment
          # 2. Database migrations
          # 3. Update load balancers
          # 4. Health checks

          echo "✅ Successfully deployed to production"

      - name: Run production smoke tests
        run: |
          # Wait for deployment to stabilize
          sleep 60

          # Run comprehensive smoke tests
          # curl -f https://smartcampus.edu/actuator/health
          # Add more production-specific tests

          echo "✅ Production smoke tests passed"

      - name: Update deployment status
        run: |
          # Update deployment tracking systems
          # Record deployment metrics
          # Update monitoring dashboards

          echo "✅ Deployment status updated"

  # Job 8: Post-Release Tasks
  post-release:
    name: Post-Release Tasks
    runs-on: ubuntu-latest
    needs:
      [
        pre-release-validation,
        create-release,
        deploy-staging,
        deploy-production,
      ]
    if: always() && needs.create-release.result == 'success'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Update documentation
        run: |
          # Update version badges in README
          sed -i "s/version-[0-9.]*/version-${{ needs.pre-release-validation.outputs.release-version }}/g" README.md

          # Update Docker image references in documentation
          find docs/ -name "*.md" -exec sed -i "s/:v[0-9.]*/:v${{ needs.pre-release-validation.outputs.release-version }}/g" {} +

      - name: Create announcement
        run: |
          cat > announcement.md << EOF
          # 🎉 SmartCampus v${{ needs.pre-release-validation.outputs.release-version }} Released!

          We're excited to announce the release of SmartCampus v${{ needs.pre-release-validation.outputs.release-version }}!

          ## 🚀 What's New

          $(grep -A 10 "## \[${{ needs.pre-release-validation.outputs.release-version }}\]" CHANGELOG.md | tail -n +2 | head -n 10)

          ## 📦 Downloads

          - [GitHub Release](${{ needs.create-release.outputs.release-url }})
          - Docker: \`docker pull ghcr.io/${{ github.repository_owner }}/smartcampus:${{ needs.pre-release-validation.outputs.release-version }}\`

          ## 📚 Documentation

          - [Getting Started](docs/guides/getting-started.md)
          - [Deployment Guide](docs/guides/deployment.md)
          - [API Documentation](docs/api/)

          ## 🔗 Links

          - [Release Notes](${{ needs.create-release.outputs.release-url }})
          - [Docker Hub](https://github.com/${{ github.repository }}/pkgs/container/smartcampus)
          - [Documentation Site](https://github.com/${{ github.repository }}/tree/main/docs)

          Happy coding! 🎓
          EOF

      - name: Create GitHub Discussion
        uses: abirismyname/create-discussion@v1.2.0
        with:
          title: "SmartCampus v${{ needs.pre-release-validation.outputs.release-version }} Released!"
          body-path: announcement.md
          category: "announcements"
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Notify stakeholders
        uses: 8398a7/action-slack@v3
        with:
          status: success
          channel: "#general"
          message: |
            🎉 **SmartCampus v${{ needs.pre-release-validation.outputs.release-version }} Released!**

            ${{ needs.deploy-production.result == 'success' && '✅ Production deployment successful' || '📦 Release created - production deployment pending' }}

            **Quick Links:**
            • [Release Notes](${{ needs.create-release.outputs.release-url }})
            • [Documentation](https://github.com/${{ github.repository }}/tree/v${{ needs.pre-release-validation.outputs.release-version }}/docs)
            • [Docker Image](ghcr.io/${{ github.repository_owner }}/smartcampus:${{ needs.pre-release-validation.outputs.release-version }})

            Thank you to everyone who contributed to this release! 🙌
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Send email notifications
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "SmartCampus v${{ needs.pre-release-validation.outputs.release-version }} Released"
          body: |
            SmartCampus v${{ needs.pre-release-validation.outputs.release-version }} has been successfully released!

            Release Information:
            - Version: ${{ needs.pre-release-validation.outputs.release-version }}
            - Release Date: $(date)
            - Release Notes: ${{ needs.create-release.outputs.release-url }}

            Deployment Status:
            - Staging: ✅ Deployed
            - Production: ${{ needs.deploy-production.result == 'success' && '✅ Deployed' || '⏳ Pending' }}

            Docker Image: ghcr.io/${{ github.repository_owner }}/smartcampus:${{ needs.pre-release-validation.outputs.release-version }}

            Best regards,
            SmartCampus Release Team
          to: stakeholders@smartcampus.edu
          from: releases@smartcampus.edu

  # Job 9: Cleanup and Monitoring
  cleanup:
    name: Cleanup and Setup Monitoring
    runs-on: ubuntu-latest
    needs: [post-release]
    if: always()

    steps:
      - name: Cleanup old releases
        uses: actions/github-script@v6
        with:
          script: |
            // Keep only the last 10 releases
            const releases = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });

            const releasesToDelete = releases.data
              .filter(release => !release.prerelease)
              .slice(10); // Keep first 10, delete the rest

            for (const release of releasesToDelete) {
              console.log(`Deleting old release: ${release.tag_name}`);
              await github.rest.repos.deleteRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: release.id
              });
            }

      - name: Schedule post-release monitoring
        run: |
          echo "Setting up post-release monitoring..."

          # Here you could:
          # 1. Enable additional monitoring alerts
          # 2. Set up performance baselines
          # 3. Schedule follow-up health checks
          # 4. Update incident response procedures

          echo "✅ Post-release monitoring configured"

      - name: Update metrics and analytics
        run: |
          echo "Updating release metrics..."

          # Track release metrics:
          # - Time from commit to release
          # - Number of commits in release
          # - Test coverage
          # - Security scan results

          echo "✅ Release metrics updated"

  # Job 10: Failure Handling
  handle-failure:
    name: Handle Release Failure
    runs-on: ubuntu-latest
    needs:
      [
        pre-release-validation,
        build-release,
        build-docker,
        security-scan,
        create-release,
        deploy-staging,
        deploy-production,
      ]
    if: failure()

    steps:
      - name: Rollback if needed
        run: |
          echo "Release failed - initiating rollback procedures..."

          # Determine what needs to be rolled back
          if [ "${{ needs.deploy-production.result }}" = "failure" ]; then
            echo "Production deployment failed - rolling back..."
            # Add production rollback commands
          fi

          if [ "${{ needs.deploy-staging.result }}" = "failure" ]; then
            echo "Staging deployment failed - investigating..."
            # Add staging investigation commands
          fi

      - name: Notify failure
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          channel: "#releases"
          message: |
            ❌ **SmartCampus Release Failed**

            Version: v${{ needs.pre-release-validation.outputs.release-version }}
            Failed Step: ${{ toJson(needs) }}

            Please investigate and take appropriate action.

            Workflow: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Create incident issue
        uses: actions/github-script@v6
        with:
          script: |
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🚨 Release Failure - v${{ needs.pre-release-validation.outputs.release-version }}`,
              body: `
              ## Release Failure Report
              
              **Version:** v${{ needs.pre-release-validation.outputs.release-version }}
              **Workflow Run:** [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
              **Failure Time:** ${new Date().toISOString()}
              
              ## Failed Jobs
              
              ${JSON.stringify(context.payload, null, 2)}
              
              ## Next Steps
              
              - [ ] Investigate root cause
              - [ ] Fix issues
              - [ ] Re-run release if needed
              - [ ] Update release process if necessary
              
              ## Rollback Status
              
              - [ ] Staging rollback (if needed)
              - [ ] Production rollback (if needed)
              - [ ] Database rollback (if needed)
              
              /label bug,release,urgent
              `,
              labels: ['bug', 'release', 'urgent']
            });

# Summary Comments
# This release automation workflow provides:
# 1. Comprehensive pre-release validation
# 2. Automated version management
# 3. Multi-platform Docker builds with signing
# 4. Security scanning of release artifacts
# 5. Automated GitHub release creation
# 6. Staging and production deployments with approval
# 7. Post-release tasks and notifications
# 8. Comprehensive failure handling and rollback
# 9. Cleanup and monitoring setup
# 10. Stakeholder communication
