# Location: docker/docker-compose.yml
# SmartCampus Docker Compose Configuration
# Production-ready multi-container setup

version: "3.8"

# Networks
networks:
  smartcampus-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volumes
volumes:
  postgres-data:
    driver: local
  redis-data:
    driver: local
  app-logs:
    driver: local
  app-data:
    driver: local
  nginx-certs:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: smartcampus-postgres
    hostname: postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-smartcampus}
      POSTGRES_USER: ${POSTGRES_USER:-smartcampus_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-smartcampus_password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=en_US.UTF-8 --lc-ctype=en_US.UTF-8"
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ../scripts/database/init-docker.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - smartcampus-network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER:-smartcampus_user} -d ${POSTGRES_DB:-smartcampus}",
        ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    security_opt:
      - no-new-privileges:true
    tmpfs:
      - /tmp
      - /var/run/postgresql
    shm_size: 256mb

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: smartcampus-redis
    hostname: redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_password} --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_password}
    volumes:
      - redis-data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - smartcampus-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    security_opt:
      - no-new-privileges:true

  # SmartCampus Application
  smartcampus-app:
    image: ${DOCKER_IMAGE:-ghcr.io/your-org/smartcampus}:${APP_VERSION:-latest}
    container_name: smartcampus-app
    hostname: smartcampus-app
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # Spring profiles
      SPRING_PROFILES_ACTIVE: ${ENVIRONMENT:-docker}

      # Server configuration
      SERVER_PORT: 8080
      SERVER_SERVLET_CONTEXT_PATH: /api

      # Database configuration
      DATABASE_URL: jdbc:postgresql://postgres:5432/${POSTGRES_DB:-smartcampus}
      DATABASE_USERNAME: ${POSTGRES_USER:-smartcampus_user}
      DATABASE_PASSWORD: ${POSTGRES_PASSWORD:-smartcampus_password}
      DATABASE_DRIVER: org.postgresql.Driver

      # Redis configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_password}

      # JVM settings
      JAVA_OPTS: >-
        -Xms512m 
        -Xmx${APP_MAX_MEMORY:-2g}
        -XX:+UseG1GC 
        -XX:+UseContainerSupport 
        -XX:MaxRAMPercentage=75.0
        -XX:+HeapDumpOnOutOfMemoryError 
        -XX:HeapDumpPath=/opt/smartcampus/logs/
        -Djava.security.egd=file:/dev/./urandom

      # Application settings
      APP_CACHE_ENABLED: true
      APP_CACHE_SIZE: 10000
      APP_CACHE_TTL: 3600

      # Security settings
      JWT_SECRET: ${JWT_SECRET:-change-this-secret-in-production}
      JWT_EXPIRATION: 3600

      # Logging
      LOGGING_LEVEL_ROOT: ${LOG_LEVEL:-INFO}
      LOGGING_LEVEL_COM_SMARTCAMPUS: ${APP_LOG_LEVEL:-INFO}
      LOGGING_FILE_NAME: /opt/smartcampus/logs/smartcampus.log

      # Monitoring
      MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: health,metrics,info,prometheus
      MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS: when_authorized
      MANAGEMENT_METRICS_EXPORT_PROMETHEUS_ENABLED: true

      # Timezone
      TZ: ${TIMEZONE:-UTC}
    volumes:
      - app-logs:/opt/smartcampus/logs
      - app-data:/opt/smartcampus/data
    ports:
      - "${APP_PORT:-8080}:8080"
    networks:
      - smartcampus-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp
      - /opt/smartcampus/temp
    deploy:
      resources:
        limits:
          cpus: "2.0"
          memory: ${APP_MAX_MEMORY:-2g}
        reservations:
          cpus: "0.5"
          memory: 512m

  # Nginx Reverse Proxy
  nginx:
    image: nginx:1.25-alpine
    container_name: smartcampus-nginx
    hostname: nginx
    restart: unless-stopped
    depends_on:
      smartcampus-app:
        condition: service_healthy
    environment:
      NGINX_ENVSUBST_TEMPLATE_DIR: /etc/nginx/templates
      NGINX_ENVSUBST_TEMPLATE_SUFFIX: .template
      UPSTREAM_HOST: smartcampus-app
      UPSTREAM_PORT: 8080
      SERVER_NAME: ${SERVER_NAME:-localhost}
    volumes:
      - ./nginx/nginx.conf.template:/etc/nginx/templates/default.conf.template:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx-certs:/etc/nginx/certs
      - app-logs:/var/log/smartcampus:ro
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    networks:
      - smartcampus-network
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost/health",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /var/cache/nginx
      - /var/run
      - /var/log/nginx

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: smartcampus-prometheus
    hostname: prometheus
    restart: unless-stopped
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=30d"
      - "--web.enable-lifecycle"
      - "--web.enable-admin-api"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/alert_rules.yml:/etc/prometheus/alert_rules.yml:ro
      - prometheus-data:/prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    networks:
      - smartcampus-network
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:9090/-/healthy",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: smartcampus-grafana
    hostname: grafana
    restart: unless-stopped
    depends_on:
      - prometheus
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_ADMIN_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_ADMIN_PASSWORD:-admin}
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource
      GF_SECURITY_ALLOW_EMBEDDING: true
      GF_SECURITY_COOKIE_SECURE: false
      GF_ANALYTICS_REPORTING_ENABLED: false
      GF_ANALYTICS_CHECK_FOR_UPDATES: false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    networks:
      - smartcampus-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f localhost:3000/api/health && echo 'ready'"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    security_opt:
      - no-new-privileges:true

  # ElasticSearch (Optional - for centralized logging)
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.0
    container_name: smartcampus-elasticsearch
    hostname: elasticsearch
    restart: unless-stopped
    profiles:
      - logging
    environment:
      discovery.type: single-node
      ES_JAVA_OPTS: -Xms512m -Xmx1g
      xpack.security.enabled: false
      xpack.security.enrollment.enabled: false
    volumes:
      - ./monitoring/elasticsearch-data:/usr/share/elasticsearch/data
    ports:
      - "${ELASTICSEARCH_PORT:-9200}:9200"
    networks:
      - smartcampus-network
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:9200 >/dev/null || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Kibana (Optional - for log visualization)
  kibana:
    image: docker.elastic.co/kibana/kibana:8.10.0
    container_name: smartcampus-kibana
    hostname: kibana
    restart: unless-stopped
    profiles:
      - logging
    depends_on:
      elasticsearch:
        condition: service_healthy
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
      SERVER_NAME: kibana
      SERVER_BASEPATH: /kibana
    ports:
      - "${KIBANA_PORT:-5601}:5601"
    networks:
      - smartcampus-network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Logstash (Optional - for log processing)
  logstash:
    image: docker.elastic.co/logstash/logstash:8.10.0
    container_name: smartcampus-logstash
    hostname: logstash
    restart: unless-stopped
    profiles:
      - logging
    depends_on:
      elasticsearch:
        condition: service_healthy
    environment:
      LS_JAVA_OPTS: -Xms256m -Xmx512m
    volumes:
      - ./monitoring/logstash/pipeline:/usr/share/logstash/pipeline:ro
      - ./monitoring/logstash/config:/usr/share/logstash/config:ro
      - app-logs:/var/log/smartcampus:ro
    ports:
      - "${LOGSTASH_PORT:-5044}:5044"
    networks:
      - smartcampus-network
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:9600 >/dev/null || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

# Health check for the entire stack
x-healthcheck-depends_on: &healthcheck-depends_on
  condition: service_healthy
